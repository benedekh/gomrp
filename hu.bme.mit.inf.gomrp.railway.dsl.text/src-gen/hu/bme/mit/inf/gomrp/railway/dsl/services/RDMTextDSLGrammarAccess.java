/*
* generated by Xtext
*/
package hu.bme.mit.inf.gomrp.railway.dsl.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class RDMTextDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class RailwayDomainModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RailwayDomainModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRailwayDomainModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRailwayDomainModelKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cTrainsAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cTrainsTrainParserRuleCall_3_0_0 = (RuleCall)cTrainsAssignment_3_0.eContents().get(0);
		private final Assignment cTrainsAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTrainsTrainParserRuleCall_3_1_0 = (RuleCall)cTrainsAssignment_3_1.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Assignment cSectionsAssignment_4_0 = (Assignment)cGroup_4.eContents().get(0);
		private final RuleCall cSectionsSectionParserRuleCall_4_0_0 = (RuleCall)cSectionsAssignment_4_0.eContents().get(0);
		private final Assignment cSectionsAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cSectionsSectionParserRuleCall_4_1_0 = (RuleCall)cSectionsAssignment_4_1.eContents().get(0);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTurnoutsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTurnoutsTurnoutParserRuleCall_5_0_0 = (RuleCall)cTurnoutsAssignment_5_0.eContents().get(0);
		private final Assignment cTurnoutsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cTurnoutsTurnoutParserRuleCall_5_1_0 = (RuleCall)cTurnoutsAssignment_5_1.eContents().get(0);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Assignment cEditorCPAssignment_6_0 = (Assignment)cGroup_6.eContents().get(0);
		private final RuleCall cEditorCPConnectionPointParserRuleCall_6_0_0 = (RuleCall)cEditorCPAssignment_6_0.eContents().get(0);
		private final Assignment cEditorCPAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cEditorCPConnectionPointParserRuleCall_6_1_0 = (RuleCall)cEditorCPAssignment_6_1.eContents().get(0);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Assignment cEditorSignalAssignment_7_0 = (Assignment)cGroup_7.eContents().get(0);
		private final RuleCall cEditorSignalSignalParserRuleCall_7_0_0 = (RuleCall)cEditorSignalAssignment_7_0.eContents().get(0);
		private final Assignment cEditorSignalAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cEditorSignalSignalParserRuleCall_7_1_0 = (RuleCall)cEditorSignalAssignment_7_1.eContents().get(0);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Assignment cEditorTDDAssignment_8_0 = (Assignment)cGroup_8.eContents().get(0);
		private final RuleCall cEditorTDDTurnoutDesiredDirectionParserRuleCall_8_0_0 = (RuleCall)cEditorTDDAssignment_8_0.eContents().get(0);
		private final Assignment cEditorTDDAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cEditorTDDTurnoutDesiredDirectionParserRuleCall_8_1_0 = (RuleCall)cEditorTDDAssignment_8_1.eContents().get(0);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Assignment cEditorRouteAssignment_9_0 = (Assignment)cGroup_9.eContents().get(0);
		private final RuleCall cEditorRouteRouteParserRuleCall_9_0_0 = (RuleCall)cEditorRouteAssignment_9_0.eContents().get(0);
		private final Assignment cEditorRouteAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cEditorRouteRouteParserRuleCall_9_1_0 = (RuleCall)cEditorRouteAssignment_9_1.eContents().get(0);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Assignment cEditorRouteElementAssignment_10_0 = (Assignment)cGroup_10.eContents().get(0);
		private final RuleCall cEditorRouteElementRouteElementParserRuleCall_10_0_0 = (RuleCall)cEditorRouteElementAssignment_10_0.eContents().get(0);
		private final Assignment cEditorRouteElementAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final RuleCall cEditorRouteElementRouteElementParserRuleCall_10_1_0 = (RuleCall)cEditorRouteElementAssignment_10_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//RailwayDomainModel returns RDM::RailwayDomainModel:
		//	{RDM::RailwayDomainModel} "RailwayDomainModel" "{" (trains+=Train trains+=Train*)? (sections+=Section
		//	sections+=Section*)? (turnouts+=Turnout turnouts+=Turnout*)? (editorCP+=ConnectionPoint editorCP+=ConnectionPoint*)?
		//	(editorSignal+=Signal editorSignal+=Signal*)? (editorTDD+=TurnoutDesiredDirection
		//	editorTDD+=TurnoutDesiredDirection*)? (editorRoute+=Route editorRoute+=Route*)? (editorRouteElement+=RouteElement
		//	editorRouteElement+=RouteElement*)? "}";
		public ParserRule getRule() { return rule; }

		//{RDM::RailwayDomainModel} "RailwayDomainModel" "{" (trains+=Train trains+=Train*)? (sections+=Section
		//sections+=Section*)? (turnouts+=Turnout turnouts+=Turnout*)? (editorCP+=ConnectionPoint editorCP+=ConnectionPoint*)?
		//(editorSignal+=Signal editorSignal+=Signal*)? (editorTDD+=TurnoutDesiredDirection
		//editorTDD+=TurnoutDesiredDirection*)? (editorRoute+=Route editorRoute+=Route*)? (editorRouteElement+=RouteElement
		//editorRouteElement+=RouteElement*)? "}"
		public Group getGroup() { return cGroup; }

		//{RDM::RailwayDomainModel}
		public Action getRailwayDomainModelAction_0() { return cRailwayDomainModelAction_0; }

		//"RailwayDomainModel"
		public Keyword getRailwayDomainModelKeyword_1() { return cRailwayDomainModelKeyword_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//(trains+=Train trains+=Train*)?
		public Group getGroup_3() { return cGroup_3; }

		//trains+=Train
		public Assignment getTrainsAssignment_3_0() { return cTrainsAssignment_3_0; }

		//Train
		public RuleCall getTrainsTrainParserRuleCall_3_0_0() { return cTrainsTrainParserRuleCall_3_0_0; }

		//trains+=Train*
		public Assignment getTrainsAssignment_3_1() { return cTrainsAssignment_3_1; }

		//Train
		public RuleCall getTrainsTrainParserRuleCall_3_1_0() { return cTrainsTrainParserRuleCall_3_1_0; }

		//(sections+=Section sections+=Section*)?
		public Group getGroup_4() { return cGroup_4; }

		//sections+=Section
		public Assignment getSectionsAssignment_4_0() { return cSectionsAssignment_4_0; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_4_0_0() { return cSectionsSectionParserRuleCall_4_0_0; }

		//sections+=Section*
		public Assignment getSectionsAssignment_4_1() { return cSectionsAssignment_4_1; }

		//Section
		public RuleCall getSectionsSectionParserRuleCall_4_1_0() { return cSectionsSectionParserRuleCall_4_1_0; }

		//(turnouts+=Turnout turnouts+=Turnout*)?
		public Group getGroup_5() { return cGroup_5; }

		//turnouts+=Turnout
		public Assignment getTurnoutsAssignment_5_0() { return cTurnoutsAssignment_5_0; }

		//Turnout
		public RuleCall getTurnoutsTurnoutParserRuleCall_5_0_0() { return cTurnoutsTurnoutParserRuleCall_5_0_0; }

		//turnouts+=Turnout*
		public Assignment getTurnoutsAssignment_5_1() { return cTurnoutsAssignment_5_1; }

		//Turnout
		public RuleCall getTurnoutsTurnoutParserRuleCall_5_1_0() { return cTurnoutsTurnoutParserRuleCall_5_1_0; }

		//(editorCP+=ConnectionPoint editorCP+=ConnectionPoint*)?
		public Group getGroup_6() { return cGroup_6; }

		//editorCP+=ConnectionPoint
		public Assignment getEditorCPAssignment_6_0() { return cEditorCPAssignment_6_0; }

		//ConnectionPoint
		public RuleCall getEditorCPConnectionPointParserRuleCall_6_0_0() { return cEditorCPConnectionPointParserRuleCall_6_0_0; }

		//editorCP+=ConnectionPoint*
		public Assignment getEditorCPAssignment_6_1() { return cEditorCPAssignment_6_1; }

		//ConnectionPoint
		public RuleCall getEditorCPConnectionPointParserRuleCall_6_1_0() { return cEditorCPConnectionPointParserRuleCall_6_1_0; }

		//(editorSignal+=Signal editorSignal+=Signal*)?
		public Group getGroup_7() { return cGroup_7; }

		//editorSignal+=Signal
		public Assignment getEditorSignalAssignment_7_0() { return cEditorSignalAssignment_7_0; }

		//Signal
		public RuleCall getEditorSignalSignalParserRuleCall_7_0_0() { return cEditorSignalSignalParserRuleCall_7_0_0; }

		//editorSignal+=Signal*
		public Assignment getEditorSignalAssignment_7_1() { return cEditorSignalAssignment_7_1; }

		//Signal
		public RuleCall getEditorSignalSignalParserRuleCall_7_1_0() { return cEditorSignalSignalParserRuleCall_7_1_0; }

		//(editorTDD+=TurnoutDesiredDirection editorTDD+=TurnoutDesiredDirection*)?
		public Group getGroup_8() { return cGroup_8; }

		//editorTDD+=TurnoutDesiredDirection
		public Assignment getEditorTDDAssignment_8_0() { return cEditorTDDAssignment_8_0; }

		//TurnoutDesiredDirection
		public RuleCall getEditorTDDTurnoutDesiredDirectionParserRuleCall_8_0_0() { return cEditorTDDTurnoutDesiredDirectionParserRuleCall_8_0_0; }

		//editorTDD+=TurnoutDesiredDirection*
		public Assignment getEditorTDDAssignment_8_1() { return cEditorTDDAssignment_8_1; }

		//TurnoutDesiredDirection
		public RuleCall getEditorTDDTurnoutDesiredDirectionParserRuleCall_8_1_0() { return cEditorTDDTurnoutDesiredDirectionParserRuleCall_8_1_0; }

		//(editorRoute+=Route editorRoute+=Route*)?
		public Group getGroup_9() { return cGroup_9; }

		//editorRoute+=Route
		public Assignment getEditorRouteAssignment_9_0() { return cEditorRouteAssignment_9_0; }

		//Route
		public RuleCall getEditorRouteRouteParserRuleCall_9_0_0() { return cEditorRouteRouteParserRuleCall_9_0_0; }

		//editorRoute+=Route*
		public Assignment getEditorRouteAssignment_9_1() { return cEditorRouteAssignment_9_1; }

		//Route
		public RuleCall getEditorRouteRouteParserRuleCall_9_1_0() { return cEditorRouteRouteParserRuleCall_9_1_0; }

		//(editorRouteElement+=RouteElement editorRouteElement+=RouteElement*)?
		public Group getGroup_10() { return cGroup_10; }

		//editorRouteElement+=RouteElement
		public Assignment getEditorRouteElementAssignment_10_0() { return cEditorRouteElementAssignment_10_0; }

		//RouteElement
		public RuleCall getEditorRouteElementRouteElementParserRuleCall_10_0_0() { return cEditorRouteElementRouteElementParserRuleCall_10_0_0; }

		//editorRouteElement+=RouteElement*
		public Assignment getEditorRouteElementAssignment_10_1() { return cEditorRouteElementAssignment_10_1; }

		//RouteElement
		public RuleCall getEditorRouteElementRouteElementParserRuleCall_10_1_0() { return cEditorRouteElementRouteElementParserRuleCall_10_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}

	public class SectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Section");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSection_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cStationParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Section returns RDM::Section:
		//	Section_Impl | Station;
		public ParserRule getRule() { return rule; }

		//Section_Impl | Station
		public Alternatives getAlternatives() { return cAlternatives; }

		//Section_Impl
		public RuleCall getSection_ImplParserRuleCall_0() { return cSection_ImplParserRuleCall_0; }

		//Station
		public RuleCall getStationParserRuleCall_1() { return cStationParserRuleCall_1; }
	}

	public class SignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSignal_ImplParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnoutSignalParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Signal returns RDM::Signal:
		//	Signal_Impl | TurnoutSignal;
		public ParserRule getRule() { return rule; }

		//Signal_Impl | TurnoutSignal
		public Alternatives getAlternatives() { return cAlternatives; }

		//Signal_Impl
		public RuleCall getSignal_ImplParserRuleCall_0() { return cSignal_ImplParserRuleCall_0; }

		//TurnoutSignal
		public RuleCall getTurnoutSignalParserRuleCall_1() { return cTurnoutSignalParserRuleCall_1; }
	}

	public class TrainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Train");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Train returns RDM::Train:
		//	"Train" name=ID;
		public ParserRule getRule() { return rule; }

		//"Train" name=ID
		public Group getGroup() { return cGroup; }

		//"Train"
		public Keyword getTrainKeyword_0() { return cTrainKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Section_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Section_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Section_Impl returns RDM::Section:
		//	"Section" name=ID;
		public ParserRule getRule() { return rule; }

		//"Section" name=ID
		public Group getGroup() { return cGroup; }

		//"Section"
		public Keyword getSectionKeyword_0() { return cSectionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TurnoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Turnout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Turnout returns RDM::Turnout:
		//	"Turnout" name=ID;
		public ParserRule getRule() { return rule; }

		//"Turnout" name=ID
		public Group getGroup() { return cGroup; }

		//"Turnout"
		public Keyword getTurnoutKeyword_0() { return cTurnoutKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class ConnectionPointElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConnectionPoint");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectionPointKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ConnectionPoint returns RDM::ConnectionPoint:
		//	"ConnectionPoint" name=ID;
		public ParserRule getRule() { return rule; }

		//"ConnectionPoint" name=ID
		public Group getGroup() { return cGroup; }

		//"ConnectionPoint"
		public Keyword getConnectionPointKeyword_0() { return cConnectionPointKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class Signal_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Signal_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Signal_Impl returns RDM::Signal:
		//	"Signal" name=ID;
		public ParserRule getRule() { return rule; }

		//"Signal" name=ID
		public Group getGroup() { return cGroup; }

		//"Signal"
		public Keyword getSignalKeyword_0() { return cSignalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TurnoutDesiredDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnoutDesiredDirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnoutDesiredDirectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TurnoutDesiredDirection returns RDM::TurnoutDesiredDirection:
		//	"TurnoutDesiredDirection" name=ID;
		public ParserRule getRule() { return rule; }

		//"TurnoutDesiredDirection" name=ID
		public Group getGroup() { return cGroup; }

		//"TurnoutDesiredDirection"
		public Keyword getTurnoutDesiredDirectionKeyword_0() { return cTurnoutDesiredDirectionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RouteElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Route");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRouteKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Route returns RDM::Route:
		//	"Route" name=ID;
		public ParserRule getRule() { return rule; }

		//"Route" name=ID
		public Group getGroup() { return cGroup; }

		//"Route"
		public Keyword getRouteKeyword_0() { return cRouteKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class RouteElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "RouteElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRouteElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//RouteElement returns RDM::RouteElement:
		//	"RouteElement" name=EString;
		public ParserRule getRule() { return rule; }

		//"RouteElement" name=EString
		public Group getGroup() { return cGroup; }

		//"RouteElement"
		public Keyword getRouteElementKeyword_0() { return cRouteElementKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class StationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Station");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//Station returns RDM::Section:
		//	"Station" name=ID;
		public ParserRule getRule() { return rule; }

		//"Station" name=ID
		public Group getGroup() { return cGroup; }

		//"Station"
		public Keyword getStationKeyword_0() { return cStationKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}

	public class TurnoutSignalElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnoutSignal");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnoutSignalKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TurnoutSignal returns RDM::TurnoutSignal:
		//	"TurnoutSignal" name=ID;
		public ParserRule getRule() { return rule; }

		//"TurnoutSignal" name=ID
		public Group getGroup() { return cGroup; }

		//"TurnoutSignal"
		public Keyword getTurnoutSignalKeyword_0() { return cTurnoutSignalKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
	}
	
	
	private final RailwayDomainModelElements pRailwayDomainModel;
	private final SectionElements pSection;
	private final SignalElements pSignal;
	private final TrainElements pTrain;
	private final Section_ImplElements pSection_Impl;
	private final TurnoutElements pTurnout;
	private final ConnectionPointElements pConnectionPoint;
	private final Signal_ImplElements pSignal_Impl;
	private final TurnoutDesiredDirectionElements pTurnoutDesiredDirection;
	private final RouteElements pRoute;
	private final RouteElementElements pRouteElement;
	private final EStringElements pEString;
	private final StationElements pStation;
	private final TurnoutSignalElements pTurnoutSignal;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public RDMTextDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pRailwayDomainModel = new RailwayDomainModelElements();
		this.pSection = new SectionElements();
		this.pSignal = new SignalElements();
		this.pTrain = new TrainElements();
		this.pSection_Impl = new Section_ImplElements();
		this.pTurnout = new TurnoutElements();
		this.pConnectionPoint = new ConnectionPointElements();
		this.pSignal_Impl = new Signal_ImplElements();
		this.pTurnoutDesiredDirection = new TurnoutDesiredDirectionElements();
		this.pRoute = new RouteElements();
		this.pRouteElement = new RouteElementElements();
		this.pEString = new EStringElements();
		this.pStation = new StationElements();
		this.pTurnoutSignal = new TurnoutSignalElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.gomrp.railway.dsl.RDMTextDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//RailwayDomainModel returns RDM::RailwayDomainModel:
	//	{RDM::RailwayDomainModel} "RailwayDomainModel" "{" (trains+=Train trains+=Train*)? (sections+=Section
	//	sections+=Section*)? (turnouts+=Turnout turnouts+=Turnout*)? (editorCP+=ConnectionPoint editorCP+=ConnectionPoint*)?
	//	(editorSignal+=Signal editorSignal+=Signal*)? (editorTDD+=TurnoutDesiredDirection
	//	editorTDD+=TurnoutDesiredDirection*)? (editorRoute+=Route editorRoute+=Route*)? (editorRouteElement+=RouteElement
	//	editorRouteElement+=RouteElement*)? "}";
	public RailwayDomainModelElements getRailwayDomainModelAccess() {
		return pRailwayDomainModel;
	}
	
	public ParserRule getRailwayDomainModelRule() {
		return getRailwayDomainModelAccess().getRule();
	}

	//Section returns RDM::Section:
	//	Section_Impl | Station;
	public SectionElements getSectionAccess() {
		return pSection;
	}
	
	public ParserRule getSectionRule() {
		return getSectionAccess().getRule();
	}

	//Signal returns RDM::Signal:
	//	Signal_Impl | TurnoutSignal;
	public SignalElements getSignalAccess() {
		return pSignal;
	}
	
	public ParserRule getSignalRule() {
		return getSignalAccess().getRule();
	}

	//Train returns RDM::Train:
	//	"Train" name=ID;
	public TrainElements getTrainAccess() {
		return pTrain;
	}
	
	public ParserRule getTrainRule() {
		return getTrainAccess().getRule();
	}

	//Section_Impl returns RDM::Section:
	//	"Section" name=ID;
	public Section_ImplElements getSection_ImplAccess() {
		return pSection_Impl;
	}
	
	public ParserRule getSection_ImplRule() {
		return getSection_ImplAccess().getRule();
	}

	//Turnout returns RDM::Turnout:
	//	"Turnout" name=ID;
	public TurnoutElements getTurnoutAccess() {
		return pTurnout;
	}
	
	public ParserRule getTurnoutRule() {
		return getTurnoutAccess().getRule();
	}

	//ConnectionPoint returns RDM::ConnectionPoint:
	//	"ConnectionPoint" name=ID;
	public ConnectionPointElements getConnectionPointAccess() {
		return pConnectionPoint;
	}
	
	public ParserRule getConnectionPointRule() {
		return getConnectionPointAccess().getRule();
	}

	//Signal_Impl returns RDM::Signal:
	//	"Signal" name=ID;
	public Signal_ImplElements getSignal_ImplAccess() {
		return pSignal_Impl;
	}
	
	public ParserRule getSignal_ImplRule() {
		return getSignal_ImplAccess().getRule();
	}

	//TurnoutDesiredDirection returns RDM::TurnoutDesiredDirection:
	//	"TurnoutDesiredDirection" name=ID;
	public TurnoutDesiredDirectionElements getTurnoutDesiredDirectionAccess() {
		return pTurnoutDesiredDirection;
	}
	
	public ParserRule getTurnoutDesiredDirectionRule() {
		return getTurnoutDesiredDirectionAccess().getRule();
	}

	//Route returns RDM::Route:
	//	"Route" name=ID;
	public RouteElements getRouteAccess() {
		return pRoute;
	}
	
	public ParserRule getRouteRule() {
		return getRouteAccess().getRule();
	}

	//RouteElement returns RDM::RouteElement:
	//	"RouteElement" name=EString;
	public RouteElementElements getRouteElementAccess() {
		return pRouteElement;
	}
	
	public ParserRule getRouteElementRule() {
		return getRouteElementAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Station returns RDM::Section:
	//	"Station" name=ID;
	public StationElements getStationAccess() {
		return pStation;
	}
	
	public ParserRule getStationRule() {
		return getStationAccess().getRule();
	}

	//TurnoutSignal returns RDM::TurnoutSignal:
	//	"TurnoutSignal" name=ID;
	public TurnoutSignalElements getTurnoutSignalAccess() {
		return pTurnoutSignal;
	}
	
	public ParserRule getTurnoutSignalRule() {
		return getTurnoutSignalAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
