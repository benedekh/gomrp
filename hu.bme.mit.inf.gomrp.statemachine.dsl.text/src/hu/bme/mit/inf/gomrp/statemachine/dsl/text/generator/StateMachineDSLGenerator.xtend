/*
 * generated by Xtext
 */
package hu.bme.mit.inf.gomrp.statemachine.dsl.text.generator

import org.eclipse.emf.ecore.resource.Resource
import org.eclipse.xtext.generator.IFileSystemAccess
import org.eclipse.xtext.generator.IGenerator
import hu.bme.mit.inf.gomrp.statemachine.dsl.text.stateMachineDSL.StateMachineBehavioralModel
import hu.bme.mit.inf.gomrp.statemachine.dsl.text.helper.ResourceHandler
import javax.swing.UIManager
import javax.swing.JOptionPane
import javax.swing.SwingUtilities
import hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutDirectionChanged
import hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainTrackElementChanged

/**
 * Generates code from your model files on save.
 * 
 * see http://www.eclipse.org/Xtext/documentation.html#TutorialCodeGeneration
 */
class StateMachineDSLGenerator implements IGenerator {

	val eventsPackageName = "hu.bme.mit.inf.gomrp.simulation.auto.events"
	val entitiesPackageName = "hu.bme.mit.inf.gomrp.simulation.auto.entities"
	val simulationCorePackageName = "hu.bme.mit.inf.gomrp.simulation.auto.core"

	override void doGenerate(Resource resource, IFileSystemAccess fsa) {

		SwingUtilities.invokeLater(
			new Runnable() {
				override run() {
					val model = resource.contents.get(0) as StateMachineBehavioralModel
					ResourceHandler.getInstance.loadAllResources(model)

					val entitygen = new EntityGenerator(resource, entitiesPackageName)
					model.statemachines.forEach[s|entitygen.create(s.referredObject)]
					entitygen.createTrackElement
					val eventgen = new EventGenerator(eventsPackageName, entitiesPackageName, simulationCorePackageName)

					if (model.statemachines.exists[sm | sm.triggers.exists[t | t instanceof TurnoutDirectionChanged]]) {
						val tosm = model.statemachines.filter[sm | sm.triggers.exists[t | t instanceof TurnoutDirectionChanged]].get(0)
						CodeGeneratorHelper.createJavaFile(resource, eventsPackageName, "TurnoutDirectionChanged",
							eventgen.generateSMTurnout(tosm))
					}
					if (model.statemachines.exists[sm | sm.triggers.exists[t | t instanceof TrainTrackElementChanged]]) {	
						eventgen.createStubsForTTEC(resource)
					}
					eventgen.createStubsForWaiting(resource)

					EnvironmentGenerator.create(resource, simulationCorePackageName, entitiesPackageName)
				}
			})
		SwingUtilities.invokeLater(
			new Runnable() {
				override run() {
					UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName)
					JOptionPane.showMessageDialog(null,
						"Simulation code generation finished.\nCheck TODO's and add your own code if necessary!")
				}
			})
	}

}
