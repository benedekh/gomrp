/*
 * generated by Xtext
 */
package hu.bme.mit.inf.gomrp.statemachine.dsl.text.formatting

import hu.bme.mit.inf.gomrp.statemachine.dsl.text.services.StateMachineDSLGrammarAccess
import java.util.List
import java.util.Set
import javax.inject.Inject
import org.eclipse.emf.ecore.EObject
import org.eclipse.xtext.GrammarUtil
import org.eclipse.xtext.Keyword
import org.eclipse.xtext.formatting.impl.AbstractDeclarativeFormatter
import org.eclipse.xtext.formatting.impl.FormattingConfig
import org.eclipse.xtext.util.Pair

// import com.google.inject.Inject;
// import hu.bme.mit.inf.gomrp.statemachine.dsl.text.services.StateMachineDSLGrammarAccess
/**
 * This class contains custom formatting description.
 * 
 * see : http://www.eclipse.org/Xtext/documentation.html#formatting
 * on how and when to use it 
 * 
 * Also see {@link org.eclipse.xtext.xtext.XtextFormattingTokenSerializer} as an example
 */
class StateMachineDSLFormatter extends AbstractDeclarativeFormatter {

	@Inject extension StateMachineDSLGrammarAccess
	EObject SL_COMMENTRule

	EObject ML_COMMENTRule

	Set<String> allKeywords

	List<Keyword> keywords
	
	List<String> excludedKeywords = newArrayList("for object", "include", "is Initial", "is Active")
	
	protected def isExcluded(Keyword keyword) {
		for (String item : excludedKeywords)
			if (keyword.value.equalsIgnoreCase(item))
				return true
		return false
	}

	override protected void configureFormatting(FormattingConfig c) {
		
		// linewrap before all keywords
		allKeywords = GrammarUtil.getAllKeywords(grammar.getGrammar());
		keywords = grammar.findKeywords(allKeywords.toArray(newArrayOfSize(allKeywords.size())));
		for (Keyword keyword : keywords) {
			if (!(isExcluded(keyword))) {
				c.setLinewrap(1).before(keyword)
			}
		}

		for (pair : findKeywordPairs('{', '}')) {
			c.setIndentation(pair.first, pair.second)
			c.setNoLinewrap().before(pair.first)
			c.setLinewrap(1).after(pair.first)
			c.setLinewrap(1).before(pair.second)
			c.setLinewrap(1).after(pair.second)
		}

		for (pair : findKeywordPairs('Actions:', 'EndActions')) {
			addIndentation(c, pair)
		}

		for (pair : findKeywordPairs('Guards:', 'EndGuards')) {
			addIndentation(c, pair)
		}

		for (pair : findKeywordPairs('Triggers:', 'EndTriggers')) {
			addIndentation(c, pair)
		}
		
		for (pair : findKeywordPairs('States:', 'EndStates')) {
			addIndentation(c, pair)
		}
		
		for (pair : findKeywordPairs('Transitions:', 'EndTransitions')) {
			addIndentation(c, pair)
		}
		c.setLinewrap(0, 1, 2).before(SL_COMMENTRule)
		c.setLinewrap(0, 1, 2).before(ML_COMMENTRule)
		c.setLinewrap(0, 1, 1).after(ML_COMMENTRule)

	}

	protected def addIndentation(FormattingConfig c, Pair<Keyword, Keyword> pair) {
		c.setIndentation(pair.first, pair.second)
		c.setLinewrap(2).before(pair.first)
		c.setLinewrap(1).after(pair.first)
		c.setLinewrap(1).before(pair.second)
		c.setLinewrap(2).after(pair.second)
	}
}
