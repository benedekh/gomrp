/*
* generated by Xtext
*/
package hu.bme.mit.inf.gomrp.statemachine.dsl.text.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class StateMachineDSLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class StateMachineBehavioralModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachineBehavioralModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cStateMachineBehavioralModelAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cIncludesAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cIncludesIncludeParserRuleCall_1_0_0 = (RuleCall)cIncludesAssignment_1_0.eContents().get(0);
		private final Assignment cStatemachinesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatemachinesStateMachineParserRuleCall_1_1_0 = (RuleCall)cStatemachinesAssignment_1_1.eContents().get(0);
		private final Assignment cStatemachinesAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cStatemachinesStateMachineParserRuleCall_1_2_0 = (RuleCall)cStatemachinesAssignment_1_2.eContents().get(0);
		
		////Entry rule
		//StateMachineBehavioralModel returns SM::StateMachineBehavioralModel:
		//	{StateMachineBehavioralModel} (includes+=Include* statemachines+=StateMachine statemachines+=StateMachine*);
		public ParserRule getRule() { return rule; }

		//{StateMachineBehavioralModel} (includes+=Include* statemachines+=StateMachine statemachines+=StateMachine*)
		public Group getGroup() { return cGroup; }

		//{StateMachineBehavioralModel}
		public Action getStateMachineBehavioralModelAction_0() { return cStateMachineBehavioralModelAction_0; }

		//includes+=Include* statemachines+=StateMachine statemachines+=StateMachine*
		public Group getGroup_1() { return cGroup_1; }

		//includes+=Include*
		public Assignment getIncludesAssignment_1_0() { return cIncludesAssignment_1_0; }

		//Include
		public RuleCall getIncludesIncludeParserRuleCall_1_0_0() { return cIncludesIncludeParserRuleCall_1_0_0; }

		//statemachines+=StateMachine
		public Assignment getStatemachinesAssignment_1_1() { return cStatemachinesAssignment_1_1; }

		//StateMachine
		public RuleCall getStatemachinesStateMachineParserRuleCall_1_1_0() { return cStatemachinesStateMachineParserRuleCall_1_1_0; }

		//statemachines+=StateMachine*
		public Assignment getStatemachinesAssignment_1_2() { return cStatemachinesAssignment_1_2; }

		//StateMachine
		public RuleCall getStatemachinesStateMachineParserRuleCall_1_2_0() { return cStatemachinesStateMachineParserRuleCall_1_2_0; }
	}

	public class IncludeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Include");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIncludeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cFilenameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cFilenameSTRINGTerminalRuleCall_1_0 = (RuleCall)cFilenameAssignment_1.eContents().get(0);
		
		//Include:
		//	"include" filename=STRING;
		public ParserRule getRule() { return rule; }

		//"include" filename=STRING
		public Group getGroup() { return cGroup; }

		//"include"
		public Keyword getIncludeKeyword_0() { return cIncludeKeyword_0; }

		//filename=STRING
		public Assignment getFilenameAssignment_1() { return cFilenameAssignment_1; }

		//STRING
		public RuleCall getFilenameSTRINGTerminalRuleCall_1_0() { return cFilenameSTRINGTerminalRuleCall_1_0; }
	}

	public class StateMachineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StateMachine");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStateMachineKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cForObjectKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cReferredObjectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cReferredObjectRDMElementCrossReference_3_0 = (CrossReference)cReferredObjectAssignment_3.eContents().get(0);
		private final RuleCall cReferredObjectRDMElementIDTerminalRuleCall_3_0_1 = (RuleCall)cReferredObjectRDMElementCrossReference_3_0.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cActionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Assignment cActionsAssignment_5_1 = (Assignment)cGroup_5.eContents().get(1);
		private final RuleCall cActionsActionParserRuleCall_5_1_0 = (RuleCall)cActionsAssignment_5_1.eContents().get(0);
		private final Keyword cEndActionsKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final Group cGroup_6 = (Group)cGroup.eContents().get(6);
		private final Keyword cGuardsKeyword_6_0 = (Keyword)cGroup_6.eContents().get(0);
		private final Assignment cGuardsAssignment_6_1 = (Assignment)cGroup_6.eContents().get(1);
		private final RuleCall cGuardsGuardParserRuleCall_6_1_0 = (RuleCall)cGuardsAssignment_6_1.eContents().get(0);
		private final Keyword cEndGuardsKeyword_6_2 = (Keyword)cGroup_6.eContents().get(2);
		private final Group cGroup_7 = (Group)cGroup.eContents().get(7);
		private final Keyword cTriggersKeyword_7_0 = (Keyword)cGroup_7.eContents().get(0);
		private final Assignment cTriggersAssignment_7_1 = (Assignment)cGroup_7.eContents().get(1);
		private final RuleCall cTriggersTriggerParserRuleCall_7_1_0 = (RuleCall)cTriggersAssignment_7_1.eContents().get(0);
		private final Keyword cEndTriggersKeyword_7_2 = (Keyword)cGroup_7.eContents().get(2);
		private final Group cGroup_8 = (Group)cGroup.eContents().get(8);
		private final Keyword cStatesKeyword_8_0 = (Keyword)cGroup_8.eContents().get(0);
		private final Assignment cStatesAssignment_8_1 = (Assignment)cGroup_8.eContents().get(1);
		private final RuleCall cStatesStateParserRuleCall_8_1_0 = (RuleCall)cStatesAssignment_8_1.eContents().get(0);
		private final Keyword cEndStatesKeyword_8_2 = (Keyword)cGroup_8.eContents().get(2);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cTransitionsKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cTransitionsAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final RuleCall cTransitionsTransitionParserRuleCall_9_1_0 = (RuleCall)cTransitionsAssignment_9_1.eContents().get(0);
		private final Keyword cEndTransitionsKeyword_9_2 = (Keyword)cGroup_9.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_10 = (Keyword)cGroup.eContents().get(10);
		
		//StateMachine returns SM::StateMachine:
		//	"StateMachine" name=ID "for object" referredObject=[RDM::RDMElement] "{" ("Actions:" actions+=Action* "EndActions")?
		//	("Guards:" guards+=Guard* "EndGuards")? ("Triggers:" triggers+=Trigger* "EndTriggers")? ("States:" states+=State*
		//	"EndStates")? ("Transitions:" transitions+=Transition* "EndTransitions")? "}";
		public ParserRule getRule() { return rule; }

		//"StateMachine" name=ID "for object" referredObject=[RDM::RDMElement] "{" ("Actions:" actions+=Action* "EndActions")?
		//("Guards:" guards+=Guard* "EndGuards")? ("Triggers:" triggers+=Trigger* "EndTriggers")? ("States:" states+=State*
		//"EndStates")? ("Transitions:" transitions+=Transition* "EndTransitions")? "}"
		public Group getGroup() { return cGroup; }

		//"StateMachine"
		public Keyword getStateMachineKeyword_0() { return cStateMachineKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"for object"
		public Keyword getForObjectKeyword_2() { return cForObjectKeyword_2; }

		//referredObject=[RDM::RDMElement]
		public Assignment getReferredObjectAssignment_3() { return cReferredObjectAssignment_3; }

		//[RDM::RDMElement]
		public CrossReference getReferredObjectRDMElementCrossReference_3_0() { return cReferredObjectRDMElementCrossReference_3_0; }

		//ID
		public RuleCall getReferredObjectRDMElementIDTerminalRuleCall_3_0_1() { return cReferredObjectRDMElementIDTerminalRuleCall_3_0_1; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4() { return cLeftCurlyBracketKeyword_4; }

		//("Actions:" actions+=Action* "EndActions")?
		public Group getGroup_5() { return cGroup_5; }

		//"Actions:"
		public Keyword getActionsKeyword_5_0() { return cActionsKeyword_5_0; }

		//actions+=Action*
		public Assignment getActionsAssignment_5_1() { return cActionsAssignment_5_1; }

		//Action
		public RuleCall getActionsActionParserRuleCall_5_1_0() { return cActionsActionParserRuleCall_5_1_0; }

		//"EndActions"
		public Keyword getEndActionsKeyword_5_2() { return cEndActionsKeyword_5_2; }

		//("Guards:" guards+=Guard* "EndGuards")?
		public Group getGroup_6() { return cGroup_6; }

		//"Guards:"
		public Keyword getGuardsKeyword_6_0() { return cGuardsKeyword_6_0; }

		//guards+=Guard*
		public Assignment getGuardsAssignment_6_1() { return cGuardsAssignment_6_1; }

		//Guard
		public RuleCall getGuardsGuardParserRuleCall_6_1_0() { return cGuardsGuardParserRuleCall_6_1_0; }

		//"EndGuards"
		public Keyword getEndGuardsKeyword_6_2() { return cEndGuardsKeyword_6_2; }

		//("Triggers:" triggers+=Trigger* "EndTriggers")?
		public Group getGroup_7() { return cGroup_7; }

		//"Triggers:"
		public Keyword getTriggersKeyword_7_0() { return cTriggersKeyword_7_0; }

		//triggers+=Trigger*
		public Assignment getTriggersAssignment_7_1() { return cTriggersAssignment_7_1; }

		//Trigger
		public RuleCall getTriggersTriggerParserRuleCall_7_1_0() { return cTriggersTriggerParserRuleCall_7_1_0; }

		//"EndTriggers"
		public Keyword getEndTriggersKeyword_7_2() { return cEndTriggersKeyword_7_2; }

		//("States:" states+=State* "EndStates")?
		public Group getGroup_8() { return cGroup_8; }

		//"States:"
		public Keyword getStatesKeyword_8_0() { return cStatesKeyword_8_0; }

		//states+=State*
		public Assignment getStatesAssignment_8_1() { return cStatesAssignment_8_1; }

		//State
		public RuleCall getStatesStateParserRuleCall_8_1_0() { return cStatesStateParserRuleCall_8_1_0; }

		//"EndStates"
		public Keyword getEndStatesKeyword_8_2() { return cEndStatesKeyword_8_2; }

		//("Transitions:" transitions+=Transition* "EndTransitions")?
		public Group getGroup_9() { return cGroup_9; }

		//"Transitions:"
		public Keyword getTransitionsKeyword_9_0() { return cTransitionsKeyword_9_0; }

		//transitions+=Transition*
		public Assignment getTransitionsAssignment_9_1() { return cTransitionsAssignment_9_1; }

		//Transition
		public RuleCall getTransitionsTransitionParserRuleCall_9_1_0() { return cTransitionsTransitionParserRuleCall_9_1_0; }

		//"EndTransitions"
		public Keyword getEndTransitionsKeyword_9_2() { return cEndTransitionsKeyword_9_2; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_10() { return cRightCurlyBracketKeyword_10; }
	}

	public class EStringElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "EString");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//EString returns ecore::EString:
		//	STRING | ID;
		public ParserRule getRule() { return rule; }

		//STRING | ID
		public Alternatives getAlternatives() { return cAlternatives; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_0() { return cSTRINGTerminalRuleCall_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1() { return cIDTerminalRuleCall_1; }
	}

	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cChangeTrainHeadingSpeedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cChangeSignalAllowedSpeedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cChangeTurnoutDirectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cChangeTrainCurrentTrackElementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cActionExpression_ImplParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Action returns SM::Action:
		//	ChangeTrainHeadingSpeed | ChangeSignalAllowedSpeed | ChangeTurnoutDirection | ChangeTrainCurrentTrackElement |
		//	ActionExpression_Impl;
		public ParserRule getRule() { return rule; }

		//ChangeTrainHeadingSpeed | ChangeSignalAllowedSpeed | ChangeTurnoutDirection | ChangeTrainCurrentTrackElement |
		//ActionExpression_Impl
		public Alternatives getAlternatives() { return cAlternatives; }

		//ChangeTrainHeadingSpeed
		public RuleCall getChangeTrainHeadingSpeedParserRuleCall_0() { return cChangeTrainHeadingSpeedParserRuleCall_0; }

		//ChangeSignalAllowedSpeed
		public RuleCall getChangeSignalAllowedSpeedParserRuleCall_1() { return cChangeSignalAllowedSpeedParserRuleCall_1; }

		//ChangeTurnoutDirection
		public RuleCall getChangeTurnoutDirectionParserRuleCall_2() { return cChangeTurnoutDirectionParserRuleCall_2; }

		//ChangeTrainCurrentTrackElement
		public RuleCall getChangeTrainCurrentTrackElementParserRuleCall_3() { return cChangeTrainCurrentTrackElementParserRuleCall_3; }

		//ActionExpression_Impl
		public RuleCall getActionExpression_ImplParserRuleCall_4() { return cActionExpression_ImplParserRuleCall_4; }
	}

	public class ActionExpression_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ActionExpression_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionEStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ActionExpression_Impl returns SM::ActionExpression:
		//	"ActionExpression" name=ID "{" expression=EString "}";
		public ParserRule getRule() { return rule; }

		//"ActionExpression" name=ID "{" expression=EString "}"
		public Group getGroup() { return cGroup; }

		//"ActionExpression"
		public Keyword getActionExpressionKeyword_0() { return cActionExpressionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//expression=EString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//EString
		public RuleCall getExpressionEStringParserRuleCall_3_0() { return cExpressionEStringParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class ChangeTrainCurrentTrackElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeTrainCurrentTrackElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeTrainCurrentTrackElementKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ChangeTrainCurrentTrackElement returns SM::ChangeTrainCurrentTrackElement:
		//	"ChangeTrainCurrentTrackElement" name=EString;
		public ParserRule getRule() { return rule; }

		//"ChangeTrainCurrentTrackElement" name=EString
		public Group getGroup() { return cGroup; }

		//"ChangeTrainCurrentTrackElement"
		public Keyword getChangeTrainCurrentTrackElementKeyword_0() { return cChangeTrainCurrentTrackElementKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class ChangeTurnoutDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeTurnoutDirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeTurnoutDirectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ChangeTurnoutDirection returns SM::ChangeTurnoutDirection:
		//	"ChangeTurnoutDirection" name=EString;
		public ParserRule getRule() { return rule; }

		//"ChangeTurnoutDirection" name=EString
		public Group getGroup() { return cGroup; }

		//"ChangeTurnoutDirection"
		public Keyword getChangeTurnoutDirectionKeyword_0() { return cChangeTurnoutDirectionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class ChangeSignalAllowedSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeSignalAllowedSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeSignalAllowedSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ChangeSignalAllowedSpeed returns SM::ChangeSignalAllowedSpeed:
		//	"ChangeSignalAllowedSpeed" name=EString;
		public ParserRule getRule() { return rule; }

		//"ChangeSignalAllowedSpeed" name=EString
		public Group getGroup() { return cGroup; }

		//"ChangeSignalAllowedSpeed"
		public Keyword getChangeSignalAllowedSpeedKeyword_0() { return cChangeSignalAllowedSpeedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class ChangeTrainHeadingSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ChangeTrainHeadingSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChangeTrainHeadingSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//ChangeTrainHeadingSpeed returns SM::ChangeTrainHeadingSpeed:
		//	"ChangeTrainHeadingSpeed" name=EString;
		public ParserRule getRule() { return rule; }

		//"ChangeTrainHeadingSpeed" name=EString
		public Group getGroup() { return cGroup; }

		//"ChangeTrainHeadingSpeed"
		public Keyword getChangeTrainHeadingSpeedKeyword_0() { return cChangeTrainHeadingSpeedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Trigger");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrainHeadingSpeedChangedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrainTrackElementChangedParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSignalAllowedSpeedChangedParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cTurnoutDirectionChangedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cTriggerExpression_ImplParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//Trigger returns SM::Trigger:
		//	TrainHeadingSpeedChanged | TrainTrackElementChanged | SignalAllowedSpeedChanged | TurnoutDirectionChanged |
		//	TriggerExpression_Impl;
		public ParserRule getRule() { return rule; }

		//TrainHeadingSpeedChanged | TrainTrackElementChanged | SignalAllowedSpeedChanged | TurnoutDirectionChanged |
		//TriggerExpression_Impl
		public Alternatives getAlternatives() { return cAlternatives; }

		//TrainHeadingSpeedChanged
		public RuleCall getTrainHeadingSpeedChangedParserRuleCall_0() { return cTrainHeadingSpeedChangedParserRuleCall_0; }

		//TrainTrackElementChanged
		public RuleCall getTrainTrackElementChangedParserRuleCall_1() { return cTrainTrackElementChangedParserRuleCall_1; }

		//SignalAllowedSpeedChanged
		public RuleCall getSignalAllowedSpeedChangedParserRuleCall_2() { return cSignalAllowedSpeedChangedParserRuleCall_2; }

		//TurnoutDirectionChanged
		public RuleCall getTurnoutDirectionChangedParserRuleCall_3() { return cTurnoutDirectionChangedParserRuleCall_3; }

		//TriggerExpression_Impl
		public RuleCall getTriggerExpression_ImplParserRuleCall_4() { return cTriggerExpression_ImplParserRuleCall_4; }
	}

	public class TrainHeadingSpeedChangedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrainHeadingSpeedChanged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainHeadingSpeedChangedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TrainHeadingSpeedChanged returns SM::TrainHeadingSpeedChanged:
		//	"TrainHeadingSpeedChanged" name=EString;
		public ParserRule getRule() { return rule; }

		//"TrainHeadingSpeedChanged" name=EString
		public Group getGroup() { return cGroup; }

		//"TrainHeadingSpeedChanged"
		public Keyword getTrainHeadingSpeedChangedKeyword_0() { return cTrainHeadingSpeedChangedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TrainTrackElementChangedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrainTrackElementChanged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainTrackElementChangedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TrainTrackElementChanged returns SM::TrainTrackElementChanged:
		//	"TrainTrackElementChanged" name=EString;
		public ParserRule getRule() { return rule; }

		//"TrainTrackElementChanged" name=EString
		public Group getGroup() { return cGroup; }

		//"TrainTrackElementChanged"
		public Keyword getTrainTrackElementChangedKeyword_0() { return cTrainTrackElementChangedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class SignalAllowedSpeedChangedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalAllowedSpeedChanged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalAllowedSpeedChangedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SignalAllowedSpeedChanged returns SM::SignalAllowedSpeedChanged:
		//	"SignalAllowedSpeedChanged" name=EString;
		public ParserRule getRule() { return rule; }

		//"SignalAllowedSpeedChanged" name=EString
		public Group getGroup() { return cGroup; }

		//"SignalAllowedSpeedChanged"
		public Keyword getSignalAllowedSpeedChangedKeyword_0() { return cSignalAllowedSpeedChangedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TurnoutDirectionChangedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnoutDirectionChanged");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnoutDirectionChangedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TurnoutDirectionChanged returns SM::TurnoutDirectionChanged:
		//	"TurnoutDirectionChanged" name=EString;
		public ParserRule getRule() { return rule; }

		//"TurnoutDirectionChanged" name=EString
		public Group getGroup() { return cGroup; }

		//"TurnoutDirectionChanged"
		public Keyword getTurnoutDirectionChangedKeyword_0() { return cTurnoutDirectionChangedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TriggerExpression_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TriggerExpression_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriggerExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionEStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//TriggerExpression_Impl returns SM::TriggerExpression:
		//	"TriggerExpression" name=ID "{" expression=EString "}";
		public ParserRule getRule() { return rule; }

		//"TriggerExpression" name=ID "{" expression=EString "}"
		public Group getGroup() { return cGroup; }

		//"TriggerExpression"
		public Keyword getTriggerExpressionKeyword_0() { return cTriggerExpressionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//expression=EString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//EString
		public RuleCall getExpressionEStringParserRuleCall_3_0() { return cExpressionEStringParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class GuardElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Guard");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cTrainCurrentHeadingSpeedParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTrainCurrentlyStandsOnParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTurnoutCurrentDirectionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSignalCurrentAllowedSpeedParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cNextTrackElementIsParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cTurnoutHasDesiredDirectionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cGuardExpression_ImplParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Guard returns SM::Guard:
		//	TrainCurrentHeadingSpeed | TrainCurrentlyStandsOn | TurnoutCurrentDirection | SignalCurrentAllowedSpeed |
		//	NextTrackElementIs | TurnoutHasDesiredDirection | GuardExpression_Impl;
		public ParserRule getRule() { return rule; }

		//TrainCurrentHeadingSpeed | TrainCurrentlyStandsOn | TurnoutCurrentDirection | SignalCurrentAllowedSpeed |
		//NextTrackElementIs | TurnoutHasDesiredDirection | GuardExpression_Impl
		public Alternatives getAlternatives() { return cAlternatives; }

		//TrainCurrentHeadingSpeed
		public RuleCall getTrainCurrentHeadingSpeedParserRuleCall_0() { return cTrainCurrentHeadingSpeedParserRuleCall_0; }

		//TrainCurrentlyStandsOn
		public RuleCall getTrainCurrentlyStandsOnParserRuleCall_1() { return cTrainCurrentlyStandsOnParserRuleCall_1; }

		//TurnoutCurrentDirection
		public RuleCall getTurnoutCurrentDirectionParserRuleCall_2() { return cTurnoutCurrentDirectionParserRuleCall_2; }

		//SignalCurrentAllowedSpeed
		public RuleCall getSignalCurrentAllowedSpeedParserRuleCall_3() { return cSignalCurrentAllowedSpeedParserRuleCall_3; }

		//NextTrackElementIs
		public RuleCall getNextTrackElementIsParserRuleCall_4() { return cNextTrackElementIsParserRuleCall_4; }

		//TurnoutHasDesiredDirection
		public RuleCall getTurnoutHasDesiredDirectionParserRuleCall_5() { return cTurnoutHasDesiredDirectionParserRuleCall_5; }

		//GuardExpression_Impl
		public RuleCall getGuardExpression_ImplParserRuleCall_6() { return cGuardExpression_ImplParserRuleCall_6; }
	}

	public class TrainCurrentHeadingSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrainCurrentHeadingSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainCurrentHeadingSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TrainCurrentHeadingSpeed:
		//	"TrainCurrentHeadingSpeed" name=EString;
		public ParserRule getRule() { return rule; }

		//"TrainCurrentHeadingSpeed" name=EString
		public Group getGroup() { return cGroup; }

		//"TrainCurrentHeadingSpeed"
		public Keyword getTrainCurrentHeadingSpeedKeyword_0() { return cTrainCurrentHeadingSpeedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TrainCurrentlyStandsOnElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TrainCurrentlyStandsOn");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTrainCurrentlyStandsOnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TrainCurrentlyStandsOn:
		//	"TrainCurrentlyStandsOn" name=EString;
		public ParserRule getRule() { return rule; }

		//"TrainCurrentlyStandsOn" name=EString
		public Group getGroup() { return cGroup; }

		//"TrainCurrentlyStandsOn"
		public Keyword getTrainCurrentlyStandsOnKeyword_0() { return cTrainCurrentlyStandsOnKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TurnoutCurrentDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnoutCurrentDirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnoutCurrentDirectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TurnoutCurrentDirection:
		//	"TurnoutCurrentDirection" name=EString;
		public ParserRule getRule() { return rule; }

		//"TurnoutCurrentDirection" name=EString
		public Group getGroup() { return cGroup; }

		//"TurnoutCurrentDirection"
		public Keyword getTurnoutCurrentDirectionKeyword_0() { return cTurnoutCurrentDirectionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class SignalCurrentAllowedSpeedElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SignalCurrentAllowedSpeed");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSignalCurrentAllowedSpeedKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//SignalCurrentAllowedSpeed:
		//	"SignalCurrentAllowedSpeed" name=EString;
		public ParserRule getRule() { return rule; }

		//"SignalCurrentAllowedSpeed" name=EString
		public Group getGroup() { return cGroup; }

		//"SignalCurrentAllowedSpeed"
		public Keyword getSignalCurrentAllowedSpeedKeyword_0() { return cSignalCurrentAllowedSpeedKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class NextTrackElementIsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NextTrackElementIs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cNextTrackElementIsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//NextTrackElementIs:
		//	"NextTrackElementIs" name=EString;
		public ParserRule getRule() { return rule; }

		//"NextTrackElementIs" name=EString
		public Group getGroup() { return cGroup; }

		//"NextTrackElementIs"
		public Keyword getNextTrackElementIsKeyword_0() { return cNextTrackElementIsKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class TurnoutHasDesiredDirectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TurnoutHasDesiredDirection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnoutHasDesiredDirectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameEStringParserRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		
		//TurnoutHasDesiredDirection:
		//	"TurnoutHasDesiredDirection" name=EString;
		public ParserRule getRule() { return rule; }

		//"TurnoutHasDesiredDirection" name=EString
		public Group getGroup() { return cGroup; }

		//"TurnoutHasDesiredDirection"
		public Keyword getTurnoutHasDesiredDirectionKeyword_0() { return cTurnoutHasDesiredDirectionKeyword_0; }

		//name=EString
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//EString
		public RuleCall getNameEStringParserRuleCall_1_0() { return cNameEStringParserRuleCall_1_0; }
	}

	public class GuardExpression_ImplElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "GuardExpression_Impl");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGuardExpressionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cExpressionAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cExpressionEStringParserRuleCall_3_0 = (RuleCall)cExpressionAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//GuardExpression_Impl returns SM::GuardExpression:
		//	"GuardExpression" name=ID "{" expression=EString "}";
		public ParserRule getRule() { return rule; }

		//"GuardExpression" name=ID "{" expression=EString "}"
		public Group getGroup() { return cGroup; }

		//"GuardExpression"
		public Keyword getGuardExpressionKeyword_0() { return cGuardExpressionKeyword_0; }

		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }

		//expression=EString
		public Assignment getExpressionAssignment_3() { return cExpressionAssignment_3; }

		//EString
		public RuleCall getExpressionEStringParserRuleCall_3_0() { return cExpressionEStringParserRuleCall_3_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}

	public class StateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "State");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final UnorderedGroup cUnorderedGroup_1 = (UnorderedGroup)cGroup.eContents().get(1);
		private final Assignment cIsInitialAssignment_1_0 = (Assignment)cUnorderedGroup_1.eContents().get(0);
		private final Keyword cIsInitialIsInitialKeyword_1_0_0 = (Keyword)cIsInitialAssignment_1_0.eContents().get(0);
		private final Assignment cIsActiveAssignment_1_1 = (Assignment)cUnorderedGroup_1.eContents().get(1);
		private final Keyword cIsActiveIsActiveKeyword_1_1_0 = (Keyword)cIsActiveAssignment_1_1.eContents().get(0);
		
		//State returns SM::State:
		//	name=ID (isInitial?="is Initial"? & isActive?="is Active"?);
		public ParserRule getRule() { return rule; }

		//name=ID (isInitial?="is Initial"? & isActive?="is Active"?)
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//isInitial?="is Initial"? & isActive?="is Active"?
		public UnorderedGroup getUnorderedGroup_1() { return cUnorderedGroup_1; }

		//isInitial?="is Initial"?
		public Assignment getIsInitialAssignment_1_0() { return cIsInitialAssignment_1_0; }

		//"is Initial"
		public Keyword getIsInitialIsInitialKeyword_1_0_0() { return cIsInitialIsInitialKeyword_1_0_0; }

		//isActive?="is Active"?
		public Assignment getIsActiveAssignment_1_1() { return cIsActiveAssignment_1_1; }

		//"is Active"
		public Keyword getIsActiveIsActiveKeyword_1_1_0() { return cIsActiveIsActiveKeyword_1_1_0; }
	}

	public class TransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Transition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cIsEnabledAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cIsEnabledIsEnabledKeyword_2_0_0 = (Keyword)cIsEnabledAssignment_2_0.eContents().get(0);
		private final Assignment cIsFireableAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cIsFireableIsFireableKeyword_2_1_0 = (Keyword)cIsFireableAssignment_2_1.eContents().get(0);
		private final Keyword cFromStateKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cSourceStateAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final CrossReference cSourceStateStateCrossReference_4_0 = (CrossReference)cSourceStateAssignment_4.eContents().get(0);
		private final RuleCall cSourceStateStateIDTerminalRuleCall_4_0_1 = (RuleCall)cSourceStateStateCrossReference_4_0.eContents().get(1);
		private final Keyword cToKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTargetStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cTargetStateStateCrossReference_6_0 = (CrossReference)cTargetStateAssignment_6.eContents().get(0);
		private final RuleCall cTargetStateStateIDTerminalRuleCall_6_0_1 = (RuleCall)cTargetStateStateCrossReference_6_0.eContents().get(1);
		private final Keyword cExecuteKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cActionAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final CrossReference cActionActionCrossReference_8_0 = (CrossReference)cActionAssignment_8.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_8_0_1 = (RuleCall)cActionActionCrossReference_8_0.eContents().get(1);
		private final Group cGroup_9 = (Group)cGroup.eContents().get(9);
		private final Keyword cCommaKeyword_9_0 = (Keyword)cGroup_9.eContents().get(0);
		private final Assignment cActionAssignment_9_1 = (Assignment)cGroup_9.eContents().get(1);
		private final CrossReference cActionActionCrossReference_9_1_0 = (CrossReference)cActionAssignment_9_1.eContents().get(0);
		private final RuleCall cActionActionIDTerminalRuleCall_9_1_0_1 = (RuleCall)cActionActionCrossReference_9_1_0.eContents().get(1);
		private final Group cGroup_10 = (Group)cGroup.eContents().get(10);
		private final Keyword cGuardKeyword_10_0 = (Keyword)cGroup_10.eContents().get(0);
		private final Assignment cGuardAssignment_10_1 = (Assignment)cGroup_10.eContents().get(1);
		private final CrossReference cGuardGuardCrossReference_10_1_0 = (CrossReference)cGuardAssignment_10_1.eContents().get(0);
		private final RuleCall cGuardGuardIDTerminalRuleCall_10_1_0_1 = (RuleCall)cGuardGuardCrossReference_10_1_0.eContents().get(1);
		private final Group cGroup_10_2 = (Group)cGroup_10.eContents().get(2);
		private final Keyword cCommaKeyword_10_2_0 = (Keyword)cGroup_10_2.eContents().get(0);
		private final Assignment cGuardAssignment_10_2_1 = (Assignment)cGroup_10_2.eContents().get(1);
		private final CrossReference cGuardGuardCrossReference_10_2_1_0 = (CrossReference)cGuardAssignment_10_2_1.eContents().get(0);
		private final RuleCall cGuardGuardIDTerminalRuleCall_10_2_1_0_1 = (RuleCall)cGuardGuardCrossReference_10_2_1_0.eContents().get(1);
		private final Group cGroup_11 = (Group)cGroup.eContents().get(11);
		private final Keyword cTriggerKeyword_11_0 = (Keyword)cGroup_11.eContents().get(0);
		private final Assignment cTriggerAssignment_11_1 = (Assignment)cGroup_11.eContents().get(1);
		private final CrossReference cTriggerTriggerCrossReference_11_1_0 = (CrossReference)cTriggerAssignment_11_1.eContents().get(0);
		private final RuleCall cTriggerTriggerIDTerminalRuleCall_11_1_0_1 = (RuleCall)cTriggerTriggerCrossReference_11_1_0.eContents().get(1);
		private final Keyword cRightCurlyBracketKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Transition returns SM::Transition:
		//	name=ID "{" (isEnabled?="is Enabled"? & isFireable?="is Fireable"?) "from state" sourceState=[SM::State] "to"
		//	targetState=[SM::State] "execute" action+=[SM::Action] ("," action+=[SM::Action])* ("guard" guard+=[SM::Guard] (","
		//	guard+=[SM::Guard])*)? ("trigger" trigger=[SM::Trigger])? "}";
		public ParserRule getRule() { return rule; }

		//name=ID "{" (isEnabled?="is Enabled"? & isFireable?="is Fireable"?) "from state" sourceState=[SM::State] "to"
		//targetState=[SM::State] "execute" action+=[SM::Action] ("," action+=[SM::Action])* ("guard" guard+=[SM::Guard] (","
		//guard+=[SM::Guard])*)? ("trigger" trigger=[SM::Trigger])? "}"
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }

		//isEnabled?="is Enabled"? & isFireable?="is Fireable"?
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }

		//isEnabled?="is Enabled"?
		public Assignment getIsEnabledAssignment_2_0() { return cIsEnabledAssignment_2_0; }

		//"is Enabled"
		public Keyword getIsEnabledIsEnabledKeyword_2_0_0() { return cIsEnabledIsEnabledKeyword_2_0_0; }

		//isFireable?="is Fireable"?
		public Assignment getIsFireableAssignment_2_1() { return cIsFireableAssignment_2_1; }

		//"is Fireable"
		public Keyword getIsFireableIsFireableKeyword_2_1_0() { return cIsFireableIsFireableKeyword_2_1_0; }

		//"from state"
		public Keyword getFromStateKeyword_3() { return cFromStateKeyword_3; }

		//sourceState=[SM::State]
		public Assignment getSourceStateAssignment_4() { return cSourceStateAssignment_4; }

		//[SM::State]
		public CrossReference getSourceStateStateCrossReference_4_0() { return cSourceStateStateCrossReference_4_0; }

		//ID
		public RuleCall getSourceStateStateIDTerminalRuleCall_4_0_1() { return cSourceStateStateIDTerminalRuleCall_4_0_1; }

		//"to"
		public Keyword getToKeyword_5() { return cToKeyword_5; }

		//targetState=[SM::State]
		public Assignment getTargetStateAssignment_6() { return cTargetStateAssignment_6; }

		//[SM::State]
		public CrossReference getTargetStateStateCrossReference_6_0() { return cTargetStateStateCrossReference_6_0; }

		//ID
		public RuleCall getTargetStateStateIDTerminalRuleCall_6_0_1() { return cTargetStateStateIDTerminalRuleCall_6_0_1; }

		//"execute"
		public Keyword getExecuteKeyword_7() { return cExecuteKeyword_7; }

		//action+=[SM::Action]
		public Assignment getActionAssignment_8() { return cActionAssignment_8; }

		//[SM::Action]
		public CrossReference getActionActionCrossReference_8_0() { return cActionActionCrossReference_8_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_8_0_1() { return cActionActionIDTerminalRuleCall_8_0_1; }

		//("," action+=[SM::Action])*
		public Group getGroup_9() { return cGroup_9; }

		//","
		public Keyword getCommaKeyword_9_0() { return cCommaKeyword_9_0; }

		//action+=[SM::Action]
		public Assignment getActionAssignment_9_1() { return cActionAssignment_9_1; }

		//[SM::Action]
		public CrossReference getActionActionCrossReference_9_1_0() { return cActionActionCrossReference_9_1_0; }

		//ID
		public RuleCall getActionActionIDTerminalRuleCall_9_1_0_1() { return cActionActionIDTerminalRuleCall_9_1_0_1; }

		//("guard" guard+=[SM::Guard] ("," guard+=[SM::Guard])*)?
		public Group getGroup_10() { return cGroup_10; }

		//"guard"
		public Keyword getGuardKeyword_10_0() { return cGuardKeyword_10_0; }

		//guard+=[SM::Guard]
		public Assignment getGuardAssignment_10_1() { return cGuardAssignment_10_1; }

		//[SM::Guard]
		public CrossReference getGuardGuardCrossReference_10_1_0() { return cGuardGuardCrossReference_10_1_0; }

		//ID
		public RuleCall getGuardGuardIDTerminalRuleCall_10_1_0_1() { return cGuardGuardIDTerminalRuleCall_10_1_0_1; }

		//("," guard+=[SM::Guard])*
		public Group getGroup_10_2() { return cGroup_10_2; }

		//","
		public Keyword getCommaKeyword_10_2_0() { return cCommaKeyword_10_2_0; }

		//guard+=[SM::Guard]
		public Assignment getGuardAssignment_10_2_1() { return cGuardAssignment_10_2_1; }

		//[SM::Guard]
		public CrossReference getGuardGuardCrossReference_10_2_1_0() { return cGuardGuardCrossReference_10_2_1_0; }

		//ID
		public RuleCall getGuardGuardIDTerminalRuleCall_10_2_1_0_1() { return cGuardGuardIDTerminalRuleCall_10_2_1_0_1; }

		//("trigger" trigger=[SM::Trigger])?
		public Group getGroup_11() { return cGroup_11; }

		//"trigger"
		public Keyword getTriggerKeyword_11_0() { return cTriggerKeyword_11_0; }

		//trigger=[SM::Trigger]
		public Assignment getTriggerAssignment_11_1() { return cTriggerAssignment_11_1; }

		//[SM::Trigger]
		public CrossReference getTriggerTriggerCrossReference_11_1_0() { return cTriggerTriggerCrossReference_11_1_0; }

		//ID
		public RuleCall getTriggerTriggerIDTerminalRuleCall_11_1_0_1() { return cTriggerTriggerIDTerminalRuleCall_11_1_0_1; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_12() { return cRightCurlyBracketKeyword_12; }
	}
	
	
	private final StateMachineBehavioralModelElements pStateMachineBehavioralModel;
	private final IncludeElements pInclude;
	private final StateMachineElements pStateMachine;
	private final EStringElements pEString;
	private final ActionElements pAction;
	private final ActionExpression_ImplElements pActionExpression_Impl;
	private final ChangeTrainCurrentTrackElementElements pChangeTrainCurrentTrackElement;
	private final ChangeTurnoutDirectionElements pChangeTurnoutDirection;
	private final ChangeSignalAllowedSpeedElements pChangeSignalAllowedSpeed;
	private final ChangeTrainHeadingSpeedElements pChangeTrainHeadingSpeed;
	private final TriggerElements pTrigger;
	private final TrainHeadingSpeedChangedElements pTrainHeadingSpeedChanged;
	private final TrainTrackElementChangedElements pTrainTrackElementChanged;
	private final SignalAllowedSpeedChangedElements pSignalAllowedSpeedChanged;
	private final TurnoutDirectionChangedElements pTurnoutDirectionChanged;
	private final TriggerExpression_ImplElements pTriggerExpression_Impl;
	private final GuardElements pGuard;
	private final TrainCurrentHeadingSpeedElements pTrainCurrentHeadingSpeed;
	private final TrainCurrentlyStandsOnElements pTrainCurrentlyStandsOn;
	private final TurnoutCurrentDirectionElements pTurnoutCurrentDirection;
	private final SignalCurrentAllowedSpeedElements pSignalCurrentAllowedSpeed;
	private final NextTrackElementIsElements pNextTrackElementIs;
	private final TurnoutHasDesiredDirectionElements pTurnoutHasDesiredDirection;
	private final GuardExpression_ImplElements pGuardExpression_Impl;
	private final StateElements pState;
	private final TransitionElements pTransition;
	
	private final Grammar grammar;

	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public StateMachineDSLGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pStateMachineBehavioralModel = new StateMachineBehavioralModelElements();
		this.pInclude = new IncludeElements();
		this.pStateMachine = new StateMachineElements();
		this.pEString = new EStringElements();
		this.pAction = new ActionElements();
		this.pActionExpression_Impl = new ActionExpression_ImplElements();
		this.pChangeTrainCurrentTrackElement = new ChangeTrainCurrentTrackElementElements();
		this.pChangeTurnoutDirection = new ChangeTurnoutDirectionElements();
		this.pChangeSignalAllowedSpeed = new ChangeSignalAllowedSpeedElements();
		this.pChangeTrainHeadingSpeed = new ChangeTrainHeadingSpeedElements();
		this.pTrigger = new TriggerElements();
		this.pTrainHeadingSpeedChanged = new TrainHeadingSpeedChangedElements();
		this.pTrainTrackElementChanged = new TrainTrackElementChangedElements();
		this.pSignalAllowedSpeedChanged = new SignalAllowedSpeedChangedElements();
		this.pTurnoutDirectionChanged = new TurnoutDirectionChangedElements();
		this.pTriggerExpression_Impl = new TriggerExpression_ImplElements();
		this.pGuard = new GuardElements();
		this.pTrainCurrentHeadingSpeed = new TrainCurrentHeadingSpeedElements();
		this.pTrainCurrentlyStandsOn = new TrainCurrentlyStandsOnElements();
		this.pTurnoutCurrentDirection = new TurnoutCurrentDirectionElements();
		this.pSignalCurrentAllowedSpeed = new SignalCurrentAllowedSpeedElements();
		this.pNextTrackElementIs = new NextTrackElementIsElements();
		this.pTurnoutHasDesiredDirection = new TurnoutHasDesiredDirectionElements();
		this.pGuardExpression_Impl = new GuardExpression_ImplElements();
		this.pState = new StateElements();
		this.pTransition = new TransitionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("hu.bme.mit.inf.gomrp.statemachine.dsl.text.StateMachineDSL".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	////Entry rule
	//StateMachineBehavioralModel returns SM::StateMachineBehavioralModel:
	//	{StateMachineBehavioralModel} (includes+=Include* statemachines+=StateMachine statemachines+=StateMachine*);
	public StateMachineBehavioralModelElements getStateMachineBehavioralModelAccess() {
		return pStateMachineBehavioralModel;
	}
	
	public ParserRule getStateMachineBehavioralModelRule() {
		return getStateMachineBehavioralModelAccess().getRule();
	}

	//Include:
	//	"include" filename=STRING;
	public IncludeElements getIncludeAccess() {
		return pInclude;
	}
	
	public ParserRule getIncludeRule() {
		return getIncludeAccess().getRule();
	}

	//StateMachine returns SM::StateMachine:
	//	"StateMachine" name=ID "for object" referredObject=[RDM::RDMElement] "{" ("Actions:" actions+=Action* "EndActions")?
	//	("Guards:" guards+=Guard* "EndGuards")? ("Triggers:" triggers+=Trigger* "EndTriggers")? ("States:" states+=State*
	//	"EndStates")? ("Transitions:" transitions+=Transition* "EndTransitions")? "}";
	public StateMachineElements getStateMachineAccess() {
		return pStateMachine;
	}
	
	public ParserRule getStateMachineRule() {
		return getStateMachineAccess().getRule();
	}

	//EString returns ecore::EString:
	//	STRING | ID;
	public EStringElements getEStringAccess() {
		return pEString;
	}
	
	public ParserRule getEStringRule() {
		return getEStringAccess().getRule();
	}

	//Action returns SM::Action:
	//	ChangeTrainHeadingSpeed | ChangeSignalAllowedSpeed | ChangeTurnoutDirection | ChangeTrainCurrentTrackElement |
	//	ActionExpression_Impl;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}

	//ActionExpression_Impl returns SM::ActionExpression:
	//	"ActionExpression" name=ID "{" expression=EString "}";
	public ActionExpression_ImplElements getActionExpression_ImplAccess() {
		return pActionExpression_Impl;
	}
	
	public ParserRule getActionExpression_ImplRule() {
		return getActionExpression_ImplAccess().getRule();
	}

	//ChangeTrainCurrentTrackElement returns SM::ChangeTrainCurrentTrackElement:
	//	"ChangeTrainCurrentTrackElement" name=EString;
	public ChangeTrainCurrentTrackElementElements getChangeTrainCurrentTrackElementAccess() {
		return pChangeTrainCurrentTrackElement;
	}
	
	public ParserRule getChangeTrainCurrentTrackElementRule() {
		return getChangeTrainCurrentTrackElementAccess().getRule();
	}

	//ChangeTurnoutDirection returns SM::ChangeTurnoutDirection:
	//	"ChangeTurnoutDirection" name=EString;
	public ChangeTurnoutDirectionElements getChangeTurnoutDirectionAccess() {
		return pChangeTurnoutDirection;
	}
	
	public ParserRule getChangeTurnoutDirectionRule() {
		return getChangeTurnoutDirectionAccess().getRule();
	}

	//ChangeSignalAllowedSpeed returns SM::ChangeSignalAllowedSpeed:
	//	"ChangeSignalAllowedSpeed" name=EString;
	public ChangeSignalAllowedSpeedElements getChangeSignalAllowedSpeedAccess() {
		return pChangeSignalAllowedSpeed;
	}
	
	public ParserRule getChangeSignalAllowedSpeedRule() {
		return getChangeSignalAllowedSpeedAccess().getRule();
	}

	//ChangeTrainHeadingSpeed returns SM::ChangeTrainHeadingSpeed:
	//	"ChangeTrainHeadingSpeed" name=EString;
	public ChangeTrainHeadingSpeedElements getChangeTrainHeadingSpeedAccess() {
		return pChangeTrainHeadingSpeed;
	}
	
	public ParserRule getChangeTrainHeadingSpeedRule() {
		return getChangeTrainHeadingSpeedAccess().getRule();
	}

	//Trigger returns SM::Trigger:
	//	TrainHeadingSpeedChanged | TrainTrackElementChanged | SignalAllowedSpeedChanged | TurnoutDirectionChanged |
	//	TriggerExpression_Impl;
	public TriggerElements getTriggerAccess() {
		return pTrigger;
	}
	
	public ParserRule getTriggerRule() {
		return getTriggerAccess().getRule();
	}

	//TrainHeadingSpeedChanged returns SM::TrainHeadingSpeedChanged:
	//	"TrainHeadingSpeedChanged" name=EString;
	public TrainHeadingSpeedChangedElements getTrainHeadingSpeedChangedAccess() {
		return pTrainHeadingSpeedChanged;
	}
	
	public ParserRule getTrainHeadingSpeedChangedRule() {
		return getTrainHeadingSpeedChangedAccess().getRule();
	}

	//TrainTrackElementChanged returns SM::TrainTrackElementChanged:
	//	"TrainTrackElementChanged" name=EString;
	public TrainTrackElementChangedElements getTrainTrackElementChangedAccess() {
		return pTrainTrackElementChanged;
	}
	
	public ParserRule getTrainTrackElementChangedRule() {
		return getTrainTrackElementChangedAccess().getRule();
	}

	//SignalAllowedSpeedChanged returns SM::SignalAllowedSpeedChanged:
	//	"SignalAllowedSpeedChanged" name=EString;
	public SignalAllowedSpeedChangedElements getSignalAllowedSpeedChangedAccess() {
		return pSignalAllowedSpeedChanged;
	}
	
	public ParserRule getSignalAllowedSpeedChangedRule() {
		return getSignalAllowedSpeedChangedAccess().getRule();
	}

	//TurnoutDirectionChanged returns SM::TurnoutDirectionChanged:
	//	"TurnoutDirectionChanged" name=EString;
	public TurnoutDirectionChangedElements getTurnoutDirectionChangedAccess() {
		return pTurnoutDirectionChanged;
	}
	
	public ParserRule getTurnoutDirectionChangedRule() {
		return getTurnoutDirectionChangedAccess().getRule();
	}

	//TriggerExpression_Impl returns SM::TriggerExpression:
	//	"TriggerExpression" name=ID "{" expression=EString "}";
	public TriggerExpression_ImplElements getTriggerExpression_ImplAccess() {
		return pTriggerExpression_Impl;
	}
	
	public ParserRule getTriggerExpression_ImplRule() {
		return getTriggerExpression_ImplAccess().getRule();
	}

	//Guard returns SM::Guard:
	//	TrainCurrentHeadingSpeed | TrainCurrentlyStandsOn | TurnoutCurrentDirection | SignalCurrentAllowedSpeed |
	//	NextTrackElementIs | TurnoutHasDesiredDirection | GuardExpression_Impl;
	public GuardElements getGuardAccess() {
		return pGuard;
	}
	
	public ParserRule getGuardRule() {
		return getGuardAccess().getRule();
	}

	//TrainCurrentHeadingSpeed:
	//	"TrainCurrentHeadingSpeed" name=EString;
	public TrainCurrentHeadingSpeedElements getTrainCurrentHeadingSpeedAccess() {
		return pTrainCurrentHeadingSpeed;
	}
	
	public ParserRule getTrainCurrentHeadingSpeedRule() {
		return getTrainCurrentHeadingSpeedAccess().getRule();
	}

	//TrainCurrentlyStandsOn:
	//	"TrainCurrentlyStandsOn" name=EString;
	public TrainCurrentlyStandsOnElements getTrainCurrentlyStandsOnAccess() {
		return pTrainCurrentlyStandsOn;
	}
	
	public ParserRule getTrainCurrentlyStandsOnRule() {
		return getTrainCurrentlyStandsOnAccess().getRule();
	}

	//TurnoutCurrentDirection:
	//	"TurnoutCurrentDirection" name=EString;
	public TurnoutCurrentDirectionElements getTurnoutCurrentDirectionAccess() {
		return pTurnoutCurrentDirection;
	}
	
	public ParserRule getTurnoutCurrentDirectionRule() {
		return getTurnoutCurrentDirectionAccess().getRule();
	}

	//SignalCurrentAllowedSpeed:
	//	"SignalCurrentAllowedSpeed" name=EString;
	public SignalCurrentAllowedSpeedElements getSignalCurrentAllowedSpeedAccess() {
		return pSignalCurrentAllowedSpeed;
	}
	
	public ParserRule getSignalCurrentAllowedSpeedRule() {
		return getSignalCurrentAllowedSpeedAccess().getRule();
	}

	//NextTrackElementIs:
	//	"NextTrackElementIs" name=EString;
	public NextTrackElementIsElements getNextTrackElementIsAccess() {
		return pNextTrackElementIs;
	}
	
	public ParserRule getNextTrackElementIsRule() {
		return getNextTrackElementIsAccess().getRule();
	}

	//TurnoutHasDesiredDirection:
	//	"TurnoutHasDesiredDirection" name=EString;
	public TurnoutHasDesiredDirectionElements getTurnoutHasDesiredDirectionAccess() {
		return pTurnoutHasDesiredDirection;
	}
	
	public ParserRule getTurnoutHasDesiredDirectionRule() {
		return getTurnoutHasDesiredDirectionAccess().getRule();
	}

	//GuardExpression_Impl returns SM::GuardExpression:
	//	"GuardExpression" name=ID "{" expression=EString "}";
	public GuardExpression_ImplElements getGuardExpression_ImplAccess() {
		return pGuardExpression_Impl;
	}
	
	public ParserRule getGuardExpression_ImplRule() {
		return getGuardExpression_ImplAccess().getRule();
	}

	//State returns SM::State:
	//	name=ID (isInitial?="is Initial"? & isActive?="is Active"?);
	public StateElements getStateAccess() {
		return pState;
	}
	
	public ParserRule getStateRule() {
		return getStateAccess().getRule();
	}

	//Transition returns SM::Transition:
	//	name=ID "{" (isEnabled?="is Enabled"? & isFireable?="is Fireable"?) "from state" sourceState=[SM::State] "to"
	//	targetState=[SM::State] "execute" action+=[SM::Action] ("," action+=[SM::Action])* ("guard" guard+=[SM::Guard] (","
	//	guard+=[SM::Guard])*)? ("trigger" trigger=[SM::Trigger])? "}";
	public TransitionElements getTransitionAccess() {
		return pTransition;
	}
	
	public ParserRule getTransitionRule() {
		return getTransitionAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" . / * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\""))* "\"" | "\'" ("\\" .
	//	/ * 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' * / | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
