/*
* generated by Xtext
*/
package hu.bme.mit.inf.gomrp.statemachine.dsl.text.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import hu.bme.mit.inf.gomrp.statemachine.dsl.text.services.StateMachineDSLGrammarAccess;

public class StateMachineDSLParser extends AbstractContentAssistParser {
	
	@Inject
	private StateMachineDSLGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected hu.bme.mit.inf.gomrp.statemachine.dsl.text.ui.contentassist.antlr.internal.InternalStateMachineDSLParser createParser() {
		hu.bme.mit.inf.gomrp.statemachine.dsl.text.ui.contentassist.antlr.internal.InternalStateMachineDSLParser result = new hu.bme.mit.inf.gomrp.statemachine.dsl.text.ui.contentassist.antlr.internal.InternalStateMachineDSLParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getTriggerAccess().getAlternatives(), "rule__Trigger__Alternatives");
					put(grammarAccess.getGuardAccess().getAlternatives(), "rule__Guard__Alternatives");
					put(grammarAccess.getStateMachineBehavioralModelAccess().getGroup(), "rule__StateMachineBehavioralModel__Group__0");
					put(grammarAccess.getStateMachineBehavioralModelAccess().getGroup_1(), "rule__StateMachineBehavioralModel__Group_1__0");
					put(grammarAccess.getIncludeAccess().getGroup(), "rule__Include__Group__0");
					put(grammarAccess.getStateMachineAccess().getGroup(), "rule__StateMachine__Group__0");
					put(grammarAccess.getStateMachineAccess().getGroup_5(), "rule__StateMachine__Group_5__0");
					put(grammarAccess.getStateMachineAccess().getGroup_6(), "rule__StateMachine__Group_6__0");
					put(grammarAccess.getStateMachineAccess().getGroup_7(), "rule__StateMachine__Group_7__0");
					put(grammarAccess.getStateMachineAccess().getGroup_8(), "rule__StateMachine__Group_8__0");
					put(grammarAccess.getStateMachineAccess().getGroup_9(), "rule__StateMachine__Group_9__0");
					put(grammarAccess.getActionExpression_ImplAccess().getGroup(), "rule__ActionExpression_Impl__Group__0");
					put(grammarAccess.getChangeTrainCurrentTrackElementAccess().getGroup(), "rule__ChangeTrainCurrentTrackElement__Group__0");
					put(grammarAccess.getChangeTurnoutDirectionAccess().getGroup(), "rule__ChangeTurnoutDirection__Group__0");
					put(grammarAccess.getChangeSignalAllowedSpeedAccess().getGroup(), "rule__ChangeSignalAllowedSpeed__Group__0");
					put(grammarAccess.getChangeTrainHeadingSpeedAccess().getGroup(), "rule__ChangeTrainHeadingSpeed__Group__0");
					put(grammarAccess.getTrainHeadingSpeedChangedAccess().getGroup(), "rule__TrainHeadingSpeedChanged__Group__0");
					put(grammarAccess.getTrainTrackElementChangedAccess().getGroup(), "rule__TrainTrackElementChanged__Group__0");
					put(grammarAccess.getSignalAllowedSpeedChangedAccess().getGroup(), "rule__SignalAllowedSpeedChanged__Group__0");
					put(grammarAccess.getTurnoutDirectionChangedAccess().getGroup(), "rule__TurnoutDirectionChanged__Group__0");
					put(grammarAccess.getTriggerExpression_ImplAccess().getGroup(), "rule__TriggerExpression_Impl__Group__0");
					put(grammarAccess.getTrainCurrentHeadingSpeedAccess().getGroup(), "rule__TrainCurrentHeadingSpeed__Group__0");
					put(grammarAccess.getTrainCurrentlyStandsOnAccess().getGroup(), "rule__TrainCurrentlyStandsOn__Group__0");
					put(grammarAccess.getTurnoutCurrentDirectionAccess().getGroup(), "rule__TurnoutCurrentDirection__Group__0");
					put(grammarAccess.getSignalCurrentAllowedSpeedAccess().getGroup(), "rule__SignalCurrentAllowedSpeed__Group__0");
					put(grammarAccess.getNextTrackElementIsAccess().getGroup(), "rule__NextTrackElementIs__Group__0");
					put(grammarAccess.getTurnoutHasDesiredDirectionAccess().getGroup(), "rule__TurnoutHasDesiredDirection__Group__0");
					put(grammarAccess.getGuardExpression_ImplAccess().getGroup(), "rule__GuardExpression_Impl__Group__0");
					put(grammarAccess.getStateAccess().getGroup(), "rule__State__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup(), "rule__Transition__Group__0");
					put(grammarAccess.getTransitionAccess().getGroup_9(), "rule__Transition__Group_9__0");
					put(grammarAccess.getTransitionAccess().getGroup_10(), "rule__Transition__Group_10__0");
					put(grammarAccess.getTransitionAccess().getGroup_10_2(), "rule__Transition__Group_10_2__0");
					put(grammarAccess.getTransitionAccess().getGroup_11(), "rule__Transition__Group_11__0");
					put(grammarAccess.getStateMachineBehavioralModelAccess().getIncludesAssignment_1_0(), "rule__StateMachineBehavioralModel__IncludesAssignment_1_0");
					put(grammarAccess.getStateMachineBehavioralModelAccess().getStatemachinesAssignment_1_1(), "rule__StateMachineBehavioralModel__StatemachinesAssignment_1_1");
					put(grammarAccess.getStateMachineBehavioralModelAccess().getStatemachinesAssignment_1_2(), "rule__StateMachineBehavioralModel__StatemachinesAssignment_1_2");
					put(grammarAccess.getIncludeAccess().getFilenameAssignment_1(), "rule__Include__FilenameAssignment_1");
					put(grammarAccess.getStateMachineAccess().getNameAssignment_1(), "rule__StateMachine__NameAssignment_1");
					put(grammarAccess.getStateMachineAccess().getReferredObjectAssignment_3(), "rule__StateMachine__ReferredObjectAssignment_3");
					put(grammarAccess.getStateMachineAccess().getActionsAssignment_5_1(), "rule__StateMachine__ActionsAssignment_5_1");
					put(grammarAccess.getStateMachineAccess().getGuardsAssignment_6_1(), "rule__StateMachine__GuardsAssignment_6_1");
					put(grammarAccess.getStateMachineAccess().getTriggersAssignment_7_1(), "rule__StateMachine__TriggersAssignment_7_1");
					put(grammarAccess.getStateMachineAccess().getStatesAssignment_8_1(), "rule__StateMachine__StatesAssignment_8_1");
					put(grammarAccess.getStateMachineAccess().getTransitionsAssignment_9_1(), "rule__StateMachine__TransitionsAssignment_9_1");
					put(grammarAccess.getActionExpression_ImplAccess().getNameAssignment_1(), "rule__ActionExpression_Impl__NameAssignment_1");
					put(grammarAccess.getActionExpression_ImplAccess().getExpressionAssignment_3(), "rule__ActionExpression_Impl__ExpressionAssignment_3");
					put(grammarAccess.getChangeTrainCurrentTrackElementAccess().getNameAssignment_1(), "rule__ChangeTrainCurrentTrackElement__NameAssignment_1");
					put(grammarAccess.getChangeTurnoutDirectionAccess().getNameAssignment_1(), "rule__ChangeTurnoutDirection__NameAssignment_1");
					put(grammarAccess.getChangeSignalAllowedSpeedAccess().getNameAssignment_1(), "rule__ChangeSignalAllowedSpeed__NameAssignment_1");
					put(grammarAccess.getChangeTrainHeadingSpeedAccess().getNameAssignment_1(), "rule__ChangeTrainHeadingSpeed__NameAssignment_1");
					put(grammarAccess.getTrainHeadingSpeedChangedAccess().getNameAssignment_1(), "rule__TrainHeadingSpeedChanged__NameAssignment_1");
					put(grammarAccess.getTrainTrackElementChangedAccess().getNameAssignment_1(), "rule__TrainTrackElementChanged__NameAssignment_1");
					put(grammarAccess.getSignalAllowedSpeedChangedAccess().getNameAssignment_1(), "rule__SignalAllowedSpeedChanged__NameAssignment_1");
					put(grammarAccess.getTurnoutDirectionChangedAccess().getNameAssignment_1(), "rule__TurnoutDirectionChanged__NameAssignment_1");
					put(grammarAccess.getTriggerExpression_ImplAccess().getNameAssignment_1(), "rule__TriggerExpression_Impl__NameAssignment_1");
					put(grammarAccess.getTriggerExpression_ImplAccess().getExpressionAssignment_3(), "rule__TriggerExpression_Impl__ExpressionAssignment_3");
					put(grammarAccess.getTrainCurrentHeadingSpeedAccess().getNameAssignment_1(), "rule__TrainCurrentHeadingSpeed__NameAssignment_1");
					put(grammarAccess.getTrainCurrentlyStandsOnAccess().getNameAssignment_1(), "rule__TrainCurrentlyStandsOn__NameAssignment_1");
					put(grammarAccess.getTurnoutCurrentDirectionAccess().getNameAssignment_1(), "rule__TurnoutCurrentDirection__NameAssignment_1");
					put(grammarAccess.getSignalCurrentAllowedSpeedAccess().getNameAssignment_1(), "rule__SignalCurrentAllowedSpeed__NameAssignment_1");
					put(grammarAccess.getNextTrackElementIsAccess().getNameAssignment_1(), "rule__NextTrackElementIs__NameAssignment_1");
					put(grammarAccess.getTurnoutHasDesiredDirectionAccess().getNameAssignment_1(), "rule__TurnoutHasDesiredDirection__NameAssignment_1");
					put(grammarAccess.getGuardExpression_ImplAccess().getNameAssignment_1(), "rule__GuardExpression_Impl__NameAssignment_1");
					put(grammarAccess.getGuardExpression_ImplAccess().getExpressionAssignment_3(), "rule__GuardExpression_Impl__ExpressionAssignment_3");
					put(grammarAccess.getStateAccess().getNameAssignment_0(), "rule__State__NameAssignment_0");
					put(grammarAccess.getStateAccess().getIsInitialAssignment_1_0(), "rule__State__IsInitialAssignment_1_0");
					put(grammarAccess.getStateAccess().getIsActiveAssignment_1_1(), "rule__State__IsActiveAssignment_1_1");
					put(grammarAccess.getTransitionAccess().getNameAssignment_0(), "rule__Transition__NameAssignment_0");
					put(grammarAccess.getTransitionAccess().getIsEnabledAssignment_2_0(), "rule__Transition__IsEnabledAssignment_2_0");
					put(grammarAccess.getTransitionAccess().getIsFireableAssignment_2_1(), "rule__Transition__IsFireableAssignment_2_1");
					put(grammarAccess.getTransitionAccess().getSourceStateAssignment_4(), "rule__Transition__SourceStateAssignment_4");
					put(grammarAccess.getTransitionAccess().getTargetStateAssignment_6(), "rule__Transition__TargetStateAssignment_6");
					put(grammarAccess.getTransitionAccess().getActionAssignment_8(), "rule__Transition__ActionAssignment_8");
					put(grammarAccess.getTransitionAccess().getActionAssignment_9_1(), "rule__Transition__ActionAssignment_9_1");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_10_1(), "rule__Transition__GuardAssignment_10_1");
					put(grammarAccess.getTransitionAccess().getGuardAssignment_10_2_1(), "rule__Transition__GuardAssignment_10_2_1");
					put(grammarAccess.getTransitionAccess().getTriggerAssignment_11_1(), "rule__Transition__TriggerAssignment_11_1");
					put(grammarAccess.getStateAccess().getUnorderedGroup_1(), "rule__State__UnorderedGroup_1");
					put(grammarAccess.getTransitionAccess().getUnorderedGroup_2(), "rule__Transition__UnorderedGroup_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			hu.bme.mit.inf.gomrp.statemachine.dsl.text.ui.contentassist.antlr.internal.InternalStateMachineDSLParser typedParser = (hu.bme.mit.inf.gomrp.statemachine.dsl.text.ui.contentassist.antlr.internal.InternalStateMachineDSLParser) parser;
			typedParser.entryRuleStateMachineBehavioralModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public StateMachineDSLGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(StateMachineDSLGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
