/**
 */
package hu.bme.mit.inf.gomrp.statemachine.StateMachine.provider;

import hu.bme.mit.inf.gomrp.statemachine.StateMachine.util.StateMachineAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class StateMachineItemProviderAdapterFactory extends StateMachineAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public StateMachineItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.StateMachineBehavioralModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateMachineBehavioralModelItemProvider stateMachineBehavioralModelItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.StateMachineBehavioralModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateMachineBehavioralModelAdapter() {
		if (stateMachineBehavioralModelItemProvider == null) {
			stateMachineBehavioralModelItemProvider = new StateMachineBehavioralModelItemProvider(this);
		}

		return stateMachineBehavioralModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.StateMachine} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateMachineItemProvider stateMachineItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.StateMachine}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateMachineAdapter() {
		if (stateMachineItemProvider == null) {
			stateMachineItemProvider = new StateMachineItemProvider(this);
		}

		return stateMachineItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.State} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StateItemProvider stateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.State}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStateAdapter() {
		if (stateItemProvider == null) {
			stateItemProvider = new StateItemProvider(this);
		}

		return stateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.Transition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TransitionItemProvider transitionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.Transition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTransitionAdapter() {
		if (transitionItemProvider == null) {
			transitionItemProvider = new TransitionItemProvider(this);
		}

		return transitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.CompositeState} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CompositeStateItemProvider compositeStateItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.CompositeState}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCompositeStateAdapter() {
		if (compositeStateItemProvider == null) {
			compositeStateItemProvider = new CompositeStateItemProvider(this);
		}

		return compositeStateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeTrainHeadingSpeed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeTrainHeadingSpeedItemProvider changeTrainHeadingSpeedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeTrainHeadingSpeed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeTrainHeadingSpeedAdapter() {
		if (changeTrainHeadingSpeedItemProvider == null) {
			changeTrainHeadingSpeedItemProvider = new ChangeTrainHeadingSpeedItemProvider(this);
		}

		return changeTrainHeadingSpeedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeSignalAllowedSpeed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeSignalAllowedSpeedItemProvider changeSignalAllowedSpeedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeSignalAllowedSpeed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeSignalAllowedSpeedAdapter() {
		if (changeSignalAllowedSpeedItemProvider == null) {
			changeSignalAllowedSpeedItemProvider = new ChangeSignalAllowedSpeedItemProvider(this);
		}

		return changeSignalAllowedSpeedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeTurnoutDirection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeTurnoutDirectionItemProvider changeTurnoutDirectionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeTurnoutDirection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeTurnoutDirectionAdapter() {
		if (changeTurnoutDirectionItemProvider == null) {
			changeTurnoutDirectionItemProvider = new ChangeTurnoutDirectionItemProvider(this);
		}

		return changeTurnoutDirectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeTrainCurrentTrackElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ChangeTrainCurrentTrackElementItemProvider changeTrainCurrentTrackElementItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ChangeTrainCurrentTrackElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createChangeTrainCurrentTrackElementAdapter() {
		if (changeTrainCurrentTrackElementItemProvider == null) {
			changeTrainCurrentTrackElementItemProvider = new ChangeTrainCurrentTrackElementItemProvider(this);
		}

		return changeTrainCurrentTrackElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainCurrentHeadingSpeed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrainCurrentHeadingSpeedItemProvider trainCurrentHeadingSpeedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainCurrentHeadingSpeed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrainCurrentHeadingSpeedAdapter() {
		if (trainCurrentHeadingSpeedItemProvider == null) {
			trainCurrentHeadingSpeedItemProvider = new TrainCurrentHeadingSpeedItemProvider(this);
		}

		return trainCurrentHeadingSpeedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainCurrentlyStandsOn} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrainCurrentlyStandsOnItemProvider trainCurrentlyStandsOnItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainCurrentlyStandsOn}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrainCurrentlyStandsOnAdapter() {
		if (trainCurrentlyStandsOnItemProvider == null) {
			trainCurrentlyStandsOnItemProvider = new TrainCurrentlyStandsOnItemProvider(this);
		}

		return trainCurrentlyStandsOnItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutCurrentDirection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurnoutCurrentDirectionItemProvider turnoutCurrentDirectionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutCurrentDirection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurnoutCurrentDirectionAdapter() {
		if (turnoutCurrentDirectionItemProvider == null) {
			turnoutCurrentDirectionItemProvider = new TurnoutCurrentDirectionItemProvider(this);
		}

		return turnoutCurrentDirectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.SignalCurrentAllowedSpeed} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalCurrentAllowedSpeedItemProvider signalCurrentAllowedSpeedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.SignalCurrentAllowedSpeed}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalCurrentAllowedSpeedAdapter() {
		if (signalCurrentAllowedSpeedItemProvider == null) {
			signalCurrentAllowedSpeedItemProvider = new SignalCurrentAllowedSpeedItemProvider(this);
		}

		return signalCurrentAllowedSpeedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainHeadingSpeedChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrainHeadingSpeedChangedItemProvider trainHeadingSpeedChangedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainHeadingSpeedChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrainHeadingSpeedChangedAdapter() {
		if (trainHeadingSpeedChangedItemProvider == null) {
			trainHeadingSpeedChangedItemProvider = new TrainHeadingSpeedChangedItemProvider(this);
		}

		return trainHeadingSpeedChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainTrackElementChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TrainTrackElementChangedItemProvider trainTrackElementChangedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TrainTrackElementChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTrainTrackElementChangedAdapter() {
		if (trainTrackElementChangedItemProvider == null) {
			trainTrackElementChangedItemProvider = new TrainTrackElementChangedItemProvider(this);
		}

		return trainTrackElementChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.SignalAllowedSpeedChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected SignalAllowedSpeedChangedItemProvider signalAllowedSpeedChangedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.SignalAllowedSpeedChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createSignalAllowedSpeedChangedAdapter() {
		if (signalAllowedSpeedChangedItemProvider == null) {
			signalAllowedSpeedChangedItemProvider = new SignalAllowedSpeedChangedItemProvider(this);
		}

		return signalAllowedSpeedChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutDirectionChanged} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurnoutDirectionChangedItemProvider turnoutDirectionChangedItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutDirectionChanged}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurnoutDirectionChangedAdapter() {
		if (turnoutDirectionChangedItemProvider == null) {
			turnoutDirectionChangedItemProvider = new TurnoutDirectionChangedItemProvider(this);
		}

		return turnoutDirectionChangedItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.NextTrackElementIs} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NextTrackElementIsItemProvider nextTrackElementIsItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.NextTrackElementIs}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNextTrackElementIsAdapter() {
		if (nextTrackElementIsItemProvider == null) {
			nextTrackElementIsItemProvider = new NextTrackElementIsItemProvider(this);
		}

		return nextTrackElementIsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutHasDesiredDirection} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TurnoutHasDesiredDirectionItemProvider turnoutHasDesiredDirectionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TurnoutHasDesiredDirection}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTurnoutHasDesiredDirectionAdapter() {
		if (turnoutHasDesiredDirectionItemProvider == null) {
			turnoutHasDesiredDirectionItemProvider = new TurnoutHasDesiredDirectionItemProvider(this);
		}

		return turnoutHasDesiredDirectionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ActionExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ActionExpressionItemProvider actionExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.ActionExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createActionExpressionAdapter() {
		if (actionExpressionItemProvider == null) {
			actionExpressionItemProvider = new ActionExpressionItemProvider(this);
		}

		return actionExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.GuardExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GuardExpressionItemProvider guardExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.GuardExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGuardExpressionAdapter() {
		if (guardExpressionItemProvider == null) {
			guardExpressionItemProvider = new GuardExpressionItemProvider(this);
		}

		return guardExpressionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TriggerExpression} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TriggerExpressionItemProvider triggerExpressionItemProvider;

	/**
	 * This creates an adapter for a {@link hu.bme.mit.inf.gomrp.statemachine.StateMachine.TriggerExpression}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTriggerExpressionAdapter() {
		if (triggerExpressionItemProvider == null) {
			triggerExpressionItemProvider = new TriggerExpressionItemProvider(this);
		}

		return triggerExpressionItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (stateMachineBehavioralModelItemProvider != null) stateMachineBehavioralModelItemProvider.dispose();
		if (stateMachineItemProvider != null) stateMachineItemProvider.dispose();
		if (stateItemProvider != null) stateItemProvider.dispose();
		if (transitionItemProvider != null) transitionItemProvider.dispose();
		if (compositeStateItemProvider != null) compositeStateItemProvider.dispose();
		if (changeTrainHeadingSpeedItemProvider != null) changeTrainHeadingSpeedItemProvider.dispose();
		if (changeSignalAllowedSpeedItemProvider != null) changeSignalAllowedSpeedItemProvider.dispose();
		if (changeTurnoutDirectionItemProvider != null) changeTurnoutDirectionItemProvider.dispose();
		if (changeTrainCurrentTrackElementItemProvider != null) changeTrainCurrentTrackElementItemProvider.dispose();
		if (trainCurrentHeadingSpeedItemProvider != null) trainCurrentHeadingSpeedItemProvider.dispose();
		if (trainCurrentlyStandsOnItemProvider != null) trainCurrentlyStandsOnItemProvider.dispose();
		if (turnoutCurrentDirectionItemProvider != null) turnoutCurrentDirectionItemProvider.dispose();
		if (signalCurrentAllowedSpeedItemProvider != null) signalCurrentAllowedSpeedItemProvider.dispose();
		if (trainHeadingSpeedChangedItemProvider != null) trainHeadingSpeedChangedItemProvider.dispose();
		if (trainTrackElementChangedItemProvider != null) trainTrackElementChangedItemProvider.dispose();
		if (signalAllowedSpeedChangedItemProvider != null) signalAllowedSpeedChangedItemProvider.dispose();
		if (turnoutDirectionChangedItemProvider != null) turnoutDirectionChangedItemProvider.dispose();
		if (nextTrackElementIsItemProvider != null) nextTrackElementIsItemProvider.dispose();
		if (turnoutHasDesiredDirectionItemProvider != null) turnoutHasDesiredDirectionItemProvider.dispose();
		if (actionExpressionItemProvider != null) actionExpressionItemProvider.dispose();
		if (guardExpressionItemProvider != null) guardExpressionItemProvider.dispose();
		if (triggerExpressionItemProvider != null) triggerExpressionItemProvider.dispose();
	}

}
